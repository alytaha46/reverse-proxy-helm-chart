name: vgeco Infrastructure
run-name: ${{ github.event.inputs.Action }} VGECO Infrastructure ${{ github.event.inputs.target_module != '' && github.event.inputs.target_module || null}} by ${{ github.actor}}
on:
  workflow_dispatch:
    inputs:
      Action:
        type: choice
        description: which action ?
        options:
          - plan
          - apply
          - destroy
      target_module:
        description: "Enter a target module"
        required: false
        default: ""
      continue:
        type: choice
        description: "Continue applying Terraform for the rest of the module in case there is target modules"
        required: false
        options:
          - "true"
          - "false"
        default: "false"
      Skip_Checkov:
        type: boolean
        description: "Skip Checkov scan"
        default: true
env:
  TARGET_MODULE: ${{ github.event.inputs.target_module }}

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write    # This is required for actions/checkout
  
jobs:
  Terraform_Workflow:
    runs-on: self-hosted
    environment: sandbox
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dependencies
        id: install_dependencies
        run: |
          sudo apt update -y
          sudo apt install gettext-base jq -y
          sudo apt install software-properties-common -y
          sudo add-apt-repository --yes --update ppa:ansible/ansible 
          sudo apt install ansible -y

      - name: configure aws credentials sandbox
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_SANDBOX  }}:role/Github-Runners-Access
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: us-east-1

      - id: private-modules
        uses: VFGroup-VBIT/vbitdc-opf-actions/private-modules@main
        with:
          org: VFGroup-VBIT
          token: ${{ secrets.GH_TOKEN }}
            
      - name: Terraform Init
        uses: VFGroup-VBIT/vbitdc-opf-actions/terraform/install-cli-and-init@main
        with:
            backend_config_file: "./backend/sandbox_backend.hcl"

      - name: Get public IP
        run: |
            MY_PUBLIC_IP=$(curl -s https://checkip.amazonaws.com/)
            echo "SECOND_SSH_CIDR_BLOCK=${MY_PUBLIC_IP}" >> $GITHUB_ENV
      
      - name: Substitute variables in sandbox.tfvars
        run: |
            envsubst < ./config/sandbox.tfvars > ./config/temp.tfvars && mv ./config/temp.tfvars ./config/sandbox.tfvars

      - name: Checkov Terraform Scan
        uses: VFGroup-VBIT/vbitdc-opf-actions/checkov-scan@main
        with:
          tfvars_file_path: "./config/sandbox.tfvars"
          github_token: ${{ secrets.GH_TOKEN }}
        if: ${{ github.event.inputs.Skip_Checkov != 'true' }}

      - name: Terraform Plan
        uses: VFGroup-VBIT/vbitdc-opf-actions/terraform/plan@main
        with:
          target_modules: ${{ env.TARGET_MODULE }}
          tfvars_file_path: "./config/sandbox.tfvars"
          continue: ${{ inputs.continue }}
        if: ${{ inputs.Action == 'plan' }}
        
      - name: Run Terraform Apply
        uses: VFGroup-VBIT/vbitdc-opf-actions/terraform/apply@main
        with:
          target_modules: ${{ env.TARGET_MODULE }}
          tfvars_file_path: "./config/sandbox.tfvars"
          continue: ${{ inputs.continue }}
        if: ${{ inputs.Action == 'apply' }}

      - name: Retrieve EIP from Terraform output
        run: |
            EIP=$(terraform output -json public_ip | jq -r '.')
            echo "EIP=${EIP}" >> $GITHUB_ENV
        if: ${{ inputs.Action == 'apply' }}

      - name: Add $EIP to known_hosts
        run: |
          sleep 20
          rm -rf $HOME/.ssh
          mkdir -p "$HOME/.ssh"
          ssh-keyscan -v -H $EIP >> ~/.ssh/known_hosts

        if: ${{ inputs.Action == 'apply' }}

      - name: Run Ansible playbook 
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
        run: |
            echo "$PRIVATE_KEY" > key.pem 
            chmod 600 key.pem
            ansible-playbook -i "${EIP}," --private-key key.pem -u ec2-user ./ansible/install_docker.yml
        if: ${{ inputs.Action == 'apply' }}

      - name: known_hosts cleanup   
        run: rm -rf ~/.ssh
        if: ${{ inputs.Action == 'apply' }}
        

      - name: Run Terraform Destroy
        uses: VFGroup-VBIT/vbitdc-opf-actions/terraform/destroy@main
        with:
          target_modules: ${{ env.TARGET_MODULE }}
          tfvars_file_path: "./config/sandbox.tfvars"
          continue: ${{ inputs.continue }}
        if: ${{ inputs.Action == 'destroy' }}